---
description: 
globs: azure-functions-deploy/**/*,ai/**/*
alwaysApply: false
---
---
description: "HustleMode.ai architecture guidelines for Azure Functions, AI integration, and system design principles"
globs: "azure-functions-deploy/**/*,ai/**/*"
alwaysApply: false
---

# HustleMode.ai Architecture

## 🎯 Core Principles
- **Ultra-Concise AI Coaching**: 8-12 words maximum per response
- **2-Personality MVP System**: Taskmaster (tough love) + Cheerleader (positive)
- **Platform-Agnostic Design**: Phone number as universal user identifier
- **Modular Architecture**: Separate APIs and personalities for maintainability
- **Azure Functions Premium**: Guaranteed warm instances, no cold starts

## 🏗️ Architecture Components

### 1. Modular Personalities System
```
personalities/
├── __init__.py        # Module interface and exports
├── taskmaster.py      # Tough love accountability coach
└── cheerleader.py     # Enthusiastic positive support
```

#### Personality Design Principles
- **Ultra-Concise**: Maximum 8-12 words per response
- **Character Consistency**: Each personality maintains distinct voice
- **Mobile-Optimized**: Perfect for text messaging platforms
- **Fallback Ready**: Emergency responses when AI unavailable
- **Extensible**: Easy addition of new personalities without affecting existing ones

#### Personality Characteristics
- **Taskmaster Mode** (Default):
  - Military discipline, no excuses approach
  - Example: "Stop whining. Go work out. Now! 🏋️‍♂️" (6 words)
  - Keywords: discipline, accountability, tough love
  - Fallbacks: "No excuses. Just action. 💪", "Work harder today! 🔥"

- **Cheerleader Mode**:
  - Enthusiastic celebration and positive reinforcement
  - Example: "YES! You're crushing it! 🎉 Keep going!" (7 words)
  - Keywords: celebration, encouragement, positivity
  - Fallbacks: "You're amazing! Keep pushing! ✨", "Celebrate every win! 🎊"

### 2. Modular API Layer
```
apis/
├── __init__.py           # Blueprint exports and registration
├── health.py            # Health check endpoints
├── assistant.py         # AI assistant with personality management
├── completion.py        # Simple completion endpoint
├── whatsapp.py         # WhatsApp webhook and messaging
└── user_management.py  # User conversations and preferences
```

#### Blueprint Architecture Benefits
- **Single Responsibility**: Each API file handles specific functionality
- **Easy Testing**: Individual API groups can be unit tested
- **Team Development**: Multiple developers can work on different APIs
- **Clean Registration**: `function_app.py` reduced to 8 lines of blueprint imports
- **Scalable**: Adding new API groups follows documented pattern

### 3. Platform-Agnostic Messaging
```
Platform Layer:
├── WhatsApp Business API (primary)
├── iMessage (future)
├── SMS (future)
└── Universal phone number identification
```

#### Universal Design Principles
- **Phone Number as Key**: Universal identifier across all messaging platforms
- **Cross-Platform Memory**: Same conversation context regardless of platform
- **Header-Based Detection**: Platform identification through request headers
- **Consistent Personalities**: Same coach behavior across all platforms
- **Future-Ready**: Easy addition of new messaging channels

### 4. Azure Functions Premium Infrastructure
```
Production Stack:
├── Azure Functions Premium (EP1)    # No cold starts, guaranteed resources
├── Application Insights            # Complete monitoring and logging
├── Azure OpenAI GPT-4              # AI response generation
├── WhatsApp Business API           # Primary messaging platform
└── deployment-config.json          # Authoritative configuration source
```

#### Premium Plan Benefits
- **No Cold Starts**: Always warm instances for instant responses
- **Guaranteed Resources**: Dedicated compute for consistent performance
- **Auto-Scaling**: Handles traffic spikes automatically
- **VNet Integration**: Enhanced security options
- **Cost Predictable**: Fixed base cost with usage scaling

## 🔄 Development Guidelines

### Modular Development Approach
1. **Personalities First**: Define personality characteristics and response patterns
2. **API Integration**: Connect personalities to appropriate API endpoints
3. **Platform Testing**: Test across multiple messaging platforms
4. **Mobile Optimization**: Ensure responses work well on mobile devices
5. **Performance Monitoring**: Track response times and user engagement

### Code Organization Standards
- **Personalities**: Keep each personality in separate file with clear characteristics
- **APIs**: Group related endpoints in blueprint modules
- **Utilities**: Helper functions in dedicated modules (`assistant_utils.py`, `whatsapp_api.py`)
- **Configuration**: Centralize constants in `constants.py`
- **Documentation**: Maintain comprehensive README files in each module directory

### Testing Strategy
- **Personality Testing**: Validate word count limits and character consistency
- **API Integration**: Test blueprint registration and cross-API communication
- **Platform Simulation**: Mock different messaging platform headers
- **Performance Testing**: Ensure sub-2-second response times
- **End-to-End Testing**: Full WhatsApp message processing workflow

## 📱 Mobile-First Design

### Ultra-Concise Response Architecture
- **Word Limit Enforcement**: 8-12 words maximum per response
- **Character Counting**: Monitor response length in real-time
- **Emoji Strategy**: Strategic emoji placement for personality expression
- **Mobile Readability**: Optimize for small screen consumption
- **Quick Interactions**: Enable rapid back-and-forth conversations

### Platform Optimization
- **WhatsApp**: Primary platform with full feature support
- **iMessage**: Future platform with same personality consistency
- **SMS**: Fallback platform with ultra-simple responses
- **Universal Formatting**: Responses work across all platforms

## 🔧 Integration Points

### AI Services Integration
- **Azure OpenAI**: Direct API calls for personality-driven responses
- **System Prompts**: Detailed personality instructions for consistency
- **Response Processing**: Ensure output meets word count requirements
- **Error Handling**: Graceful fallback to cached personality responses
- **Token Management**: Optimize for cost-effective AI usage

### Messaging Platform Integration
- **WhatsApp Business API**: Primary integration with webhook processing
- **Function Key Authentication**: All endpoints require Azure function keys
- **Webhook Verification**: Proper challenge-response handling
- **Message Types**: Support text, voice, image, and other media types
- **Rate Limiting**: Prevent abuse while maintaining responsiveness

## 🚀 Deployment & Operations

### Configuration Management
- **Authoritative Source**: `deployment-config.json` for all configuration values
- **Environment Variables**: Secure handling of tokens and API keys
- **Documentation Sync**: PRODUCTION_LINKS.md references config file
- **Version Control**: Track all configuration changes in git

### Monitoring & Performance
- **Application Insights**: Complete request/response logging
- **Performance Metrics**: Response time, success rate, error tracking
- **Usage Patterns**: Monitor personality selection and user engagement
- **Cost Tracking**: Monitor Azure OpenAI usage and function execution costs

### Scalability Considerations
- **Stateless Design**: No server-side state storage
- **Caching Strategy**: Cache personality definitions and common responses
- **Database Ready**: Architecture supports PostgreSQL integration for user data
- **Global Distribution**: Ready for multi-region deployment

## 🎯 Future Architecture Evolution

### Phase 2: Enhanced Memory
- **PostgreSQL Integration**: User data persistence and conversation history
- **Cross-Platform Context**: Maintain conversation state across platforms
- **Goal Tracking**: Integration with user goal management
- **Advanced Analytics**: User engagement and coaching effectiveness metrics

### Phase 3: Advanced Features
- **Voice Processing**: Audio message handling and voice responses
- **Multi-Language**: Support for multiple languages with personality consistency
- **Group Coaching**: Multi-user conversation support
- **Advanced AI**: More sophisticated personality behaviors and learning

---
**Core Focus**: Ultra-concise, personality-driven AI coaching optimized for mobile messaging platforms with modular, maintainable architecture
