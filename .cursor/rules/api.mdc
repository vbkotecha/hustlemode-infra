---
description: 
globs: azure-functions-deploy/**/*
alwaysApply: false
---
---
description: "API design guidelines for RESTful endpoints, request/response formats, and security best practices"
globs: "azure-functions-deploy/**/*"
alwaysApply: false
---

# API Design Guidelines

## Endpoint Structure
- Use RESTful conventions
- Version all endpoints
- Example: `/api/v1/goals`

## Request/Response Format
```typescript
// Request
interface ApiRequest {
  promptId: string;
  variables: Record<string, any>;
  context?: Record<string, any>;
}

// Response
interface ApiResponse {
  success: boolean;
  data?: any;
  error?: {
    code: string;
    message: string;
  };
}
```

## Error Handling
- Use standard HTTP status codes
- Include detailed error messages
- Log all errors

## Security
- Require API key
- Implement rate limiting
- Validate all inputs
- Sanitize all outputs

## Documentation
- Use OpenAPI/Swagger
- Include examples
- Document rate limits
- List all error codes

# HustleMode.ai API Design Guidelines

## 🎭 Personality System Architecture

### 2-Personality MVP System
- **Taskmaster Mode**: Tough love, military discipline, no excuses (default)
- **Cheerleader Mode**: Enthusiastic celebration, positive reinforcement
- **Personality Selection**: Via `personality` parameter in request body
- **Platform Agnostic**: Same personalities across WhatsApp, iMessage, SMS (future)

### Ultra-Concise Response Requirements
- **Maximum Length**: 8-12 words per response
- **Mobile Optimized**: Perfect for text messaging platforms
- **Personality Consistency**: Each mode maintains character within word limits
- **Examples**:
  - Taskmaster: "Stop whining. Go work out. Now! 🏋️‍♂️" (6 words)
  - Cheerleader: "YES! You're crushing it! 🎉 Keep going!" (7 words)

## 🏗️ Modular Blueprint Architecture

### API Organization Pattern
```
apis/
├── health.py           # Health check endpoints
├── assistant.py        # AI assistant with personalities  
├── completion.py       # Simple completion endpoint
├── whatsapp.py        # WhatsApp webhook and messaging
└── user_management.py # User conversations and preferences
```

### Blueprint Registration
- **Clean Function App**: `function_app.py` should only register blueprints (8 lines max)
- **Separation of Concerns**: Each API group handles specific functionality
- **Easy Extension**: Adding new API groups follows documented pattern

## 📱 Platform-Agnostic Design

### Universal User Identification
- **Primary Key**: Phone number (universal across messaging platforms)
- **Cross-Platform Memory**: Same conversation context across WhatsApp, iMessage, SMS
- **Platform Detection**: Headers-based platform identification
- **Future Ready**: Easy addition of new messaging platforms

### Message Processing
- **Personality Commands**: "switch to cheerleader", "be my taskmaster"
- **Intent Detection**: Motivation requests, goal setting, general support
- **Fallback System**: Emergency responses when AI unavailable
- **Response Consistency**: Same personality traits across all platforms

## 🔌 Endpoint Structure Standards

### RESTful Conventions
- Use standard HTTP methods (GET, POST, PUT, DELETE)
- Consistent URL patterns: `/api/{resource}/{id}`
- Clear resource naming: singular for single items, plural for collections

### Request/Response Format
```typescript
// Personality-based Request
interface AssistantRequest {
  message: string;
  personality?: "taskmaster" | "cheerleader";
  context?: Record<string, any>;
}

// Standard Response
interface ApiResponse {
  success: boolean;
  data?: {
    response: string;           // 8-12 words max
    personality: string;        // Current personality mode
    word_count?: number;        // For mobile optimization
  };
  error?: {
    code: string;
    message: string;
  };
}
```

## 🔑 Authentication & Security

### Function Key Requirements
- **All Endpoints**: Require Azure Functions key authentication
- **URL Format**: `?code={function_key}` parameter required
- **WhatsApp Webhook**: MUST include function key for Azure authentication
- **Security Headers**: Validate all incoming requests

### Input Validation
- **Message Length**: Validate incoming message length
- **Personality Values**: Enum validation for personality parameter
- **Sanitization**: Clean all user inputs before processing
- **Rate Limiting**: Implement per-user rate limits for AI endpoints

## 📊 Response Optimization

### Mobile-First Design
- **Word Count Tracking**: Monitor response length for mobile optimization
- **Emoji Usage**: Strategic emoji placement for personality expression
- **Response Time**: Target < 2 seconds for real-time messaging
- **Caching**: Cache personality definitions and common responses

### Error Handling
- **Graceful Degradation**: Fallback to cached responses if AI unavailable
- **Personality-Appropriate Errors**: Error messages match current personality
- **Logging**: Comprehensive logging without exposing sensitive data
- **Recovery**: Automatic retry logic for transient failures

## 🧪 Testing Standards

### Personality Testing
- **Each Personality**: Test all personalities with same input scenarios
- **Word Count Validation**: Ensure responses stay within 8-12 word limit
- **Character Consistency**: Verify personality traits maintained across responses
- **Platform Simulation**: Test with different platform headers

### Integration Testing
- **Blueprint Registration**: Test all API groups load correctly
- **Cross-API Communication**: Test APIs calling each other appropriately
- **WhatsApp Webhook**: Full end-to-end message processing
- **Authentication**: Verify function key requirements enforced

## 📈 Performance Requirements

### Response Time Targets
- **Health Check**: < 200ms
- **Simple Completion**: < 1 second  
- **AI Assistant**: < 2 seconds
- **WhatsApp Processing**: < 3 seconds end-to-end

### Scalability Design
- **Stateless Operations**: No server-side state storage
- **Concurrent Users**: Support unlimited concurrent requests
- **Auto-scaling**: Leverage Azure Functions Premium auto-scaling
- **Resource Efficiency**: Minimal memory and CPU usage per request

## 🔄 Development Workflow

### Adding New API Groups
1. Create new file in `apis/` directory
2. Implement Azure Functions blueprint pattern
3. Export blueprint in `apis/__init__.py`
4. Register in `function_app.py`
5. Add comprehensive tests
6. Update documentation

### Personality Extensions
1. Add new personality file in `personalities/` directory
2. Implement ultra-concise response pattern
3. Update personality selection enum
4. Test with all existing endpoints
5. Document personality characteristics

---
**Focus**: Ultra-concise, personality-driven, platform-agnostic API design optimized for mobile messaging platforms
