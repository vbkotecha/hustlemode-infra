# HustleMode.ai Supabase Deployment Rules

## 🛡️ CRITICAL: Quality Enforcement Integration

**MANDATORY**: ALL deployments MUST pass automated quality checks:
- `scripts/code-quality-check.sh` - Runs automatically before deployment
- Pre-commit hooks - Block commits with quality violations
- File size limits - No files over specified limits
- Zero duplication - Shared modules required for common code
- TypeScript validation - No compilation errors allowed
- Organization checks - Proper directory structure enforced

**Quality checks are AUTOMATICALLY INTEGRATED into all deployment scripts**

## 🎯 Supabase Configuration (Authoritative Values)

### Project Configuration
- **Platform**: `Supabase Edge Functions`
- **Runtime**: `Deno/TypeScript`
- **Project Type**: `Edge Functions + PostgreSQL + Groq API`
- **Region**: `us-east-1` (default)
- **Database**: `Supabase PostgreSQL with RLS`
- **AI Provider**: `Groq (meta-llama/llama-4-maverick-17b-128e-instruct)`
- **Memory Provider**: `Mem0 Cloud API`

### URLs (Production)
- **Base URL**: `https://yzfclhnkxpgyxeklrvur.supabase.co/functions/v1`
- **Health Check**: `https://yzfclhnkxpgyxeklrvur.supabase.co/functions/v1/health`
- **Chat API**: `https://yzfclhnkxpgyxeklrvur.supabase.co/functions/v1/chat`
- **WhatsApp Webhook**: `https://yzfclhnkxpgyxeklrvur.supabase.co/functions/v1/whatsapp`
- **Dashboard**: `https://supabase.com/dashboard/project/yzfclhnkxpgyxeklrvur`

### Environment Configuration
- **Memory Provider**: `Mem0 Cloud API` (m0-px1OPjDmgZtUYoMwaNRUeGOL8nnoqT5zv8oUaDdj)
- **AI Provider**: `Groq (Llama 4 Maverick 17B)`
- **Database**: `Supabase PostgreSQL (yzfclhnkxpgyxeklrvur)`
- **Authentication**: `Service Role Key`

## 🚀 Quality-Enforced Deployment Architecture

### Automated Quality-Checked Deployment
```bash
# All deployments now include automatic quality checks
./scripts/deploy-supabase.sh
# → Runs code-quality-check.sh automatically
# → Blocks deployment if quality issues found

./scripts/deploy-migrations.sh
# → Runs code-quality-check.sh automatically
# → Validates file sizes, duplication, organization
```

### Individual Function Deployment (With Quality Checks)
```bash
# Quality checks integrated into all deployment paths
supabase functions deploy health    # ≤100 lines enforced
supabase functions deploy chat      # ≤100 lines enforced  
supabase functions deploy whatsapp  # ≤100 lines enforced
```

### Quality Gate Requirements (CANNOT BYPASS)
- **File Size Validation**: Edge functions ≤100 lines, shared modules ≤80 lines
- **Duplication Detection**: Zero tolerance for duplicate code
- **Organization Check**: Proper directory structure required
- **TypeScript Compilation**: All functions must compile without errors
- **Import Validation**: No circular dependencies allowed

## 🔧 Quality-Controlled Project Structure

### Enforced Structure (Validated Automatically)
```
supabase/
├── functions/
│   ├── health/
│   │   └── index.ts          # ≤100 lines - routing only
│   ├── chat/
│   │   ├── index.ts          # ≤100 lines - routing only
│   │   └── handlers.ts       # ≤120 lines - business logic
│   └── whatsapp/
│       ├── index.ts          # ≤100 lines - routing only
│       └── handlers.ts       # ≤120 lines - business logic
├── shared/
│   ├── ai.ts                 # ≤80 lines - AI generation
│   ├── users.ts              # ≤80 lines - user operations
│   ├── config.ts             # ≤80 lines - configuration
│   ├── database/
│   │   ├── index.ts          # ≤20 lines - exports only
│   │   ├── client.ts         # ≤80 lines - client management
│   │   ├── users.ts          # ≤80 lines - user operations
│   │   └── health.ts         # ≤80 lines - health checks
│   └── utils/
│       ├── index.ts          # ≤20 lines - exports only
│       ├── responses.ts      # ≤60 lines - response helpers
│       ├── validation.ts     # ≤60 lines - validation logic
│       ├── text.ts           # ≤60 lines - text processing
│       └── performance.ts    # ≤60 lines - performance monitoring
├── migrations/
│   ├── 20241219_v1.0.0_baseline_schema.sql
│   └── README.md
├── deno.json
└── import_map.json
```

### Quality Validation Rules (AUTOMATICALLY ENFORCED)
- ✅ All functions must use TypeScript with no compilation errors
- ✅ File size limits strictly enforced (see limits above)
- ✅ Zero code duplication tolerance
- ✅ Shared utilities must be in appropriate directories
- ✅ Database schema managed through migration system
- ✅ Import maps defined in `import_map.json`
- ❌ Never exceed file size limits
- ❌ Never duplicate code between modules
- ❌ Never deploy without passing quality checks

## 🚨 MANDATORY Quality-Enhanced Documentation Sync

### 🔄 Change Propagation Rules (QUALITY-VALIDATED)

#### Any deployment-config.json changes → MUST UPDATE:
- ✅ **README.md**: All URLs, configuration values, and examples
- ✅ **Database schema**: Table structure and functions  
- ✅ **Environment variables**: .env template and production config
- ✅ **Quality enforcement**: Update file size limits if needed
- ✅ **This cursor rule**: If project configuration changes

#### Any database schema changes → MUST UPDATE:
- ✅ **README.md**: Database schema section
- ✅ **deployment-config.json**: Database configuration
- ✅ **Memory service**: Update user operations
- ✅ **Migration system**: Create new versioned migration

#### Any code structure changes → MUST UPDATE:
- ✅ **Quality enforcement rules**: Update file organization checks
- ✅ **Import maps**: Update module dependencies
- ✅ **Documentation**: Reflect new module structure

### 📋 Quality-Enhanced Documentation Checklist

Before committing ANY deployment changes:
- [ ] **Quality checks pass**: `./scripts/code-quality-check.sh` succeeds
- [ ] **File size compliance**: All files within specified limits
- [ ] **Zero duplication**: No duplicate code detected
- [ ] **README.md** reflects all current configuration values
- [ ] **deployment-config.json** contains authoritative source of truth
- [ ] **All URLs are identical** across all files (no placeholders)
- [ ] **Environment variables are current** in all examples
- [ ] **Migration system**: Database changes properly versioned
- [ ] **All curl commands tested** and working

## 🔧 Quality-Integrated Deployment Methods

### Method 1: Automated Quality-Checked Deployment (Recommended)
```bash
# Quality checks run automatically before deployment
./scripts/deploy-supabase.sh
# → Code quality validation
# → File size enforcement  
# → Duplication detection
# → TypeScript compilation
# → Then deployment proceeds

# Migration deployment with quality checks
./scripts/deploy-migrations.sh
# → Schema validation
# → Quality enforcement
# → Migration deployment
```

### Method 2: Manual with Quality Validation
```bash
# Run quality checks manually first
./scripts/code-quality-check.sh

# Then deploy if quality checks pass
supabase functions deploy
```

### Method 3: Development Quality Monitoring
```bash
# Daily quality monitoring
./scripts/daily-quality-report.sh

# Setup quality enforcement system
./scripts/setup-quality-enforcement.sh
```

## 🗄️ Migration-Managed Database Deployment

### Automated Migration System (QUALITY-VALIDATED)
```bash
# Create new migration (version-controlled)
./scripts/create-migration.sh "description of changes"

# Deploy migrations with quality checks
./scripts/deploy-migrations.sh
# → Quality validation first
# → Schema deployment
# → Version tracking
```

### Required Tables (Schema v1.0.0)
- ✅ `users` - Core user data with phone number lookup
- ✅ `user_preferences` - AI personality and settings  
- ✅ `schema_versions` - Migration tracking and versioning

### Quality-Enforced Security Requirements
- ✅ Row Level Security (RLS) enabled on all tables
- ✅ Service role key for Edge Functions
- ✅ Proper foreign key constraints
- ✅ Indexes for performance optimization
- ✅ Phone number constraints with + prefix validation

## 🧠 Memory Service Configuration (Quality-Controlled)

### Mem0 Cloud Provider (Production)
```bash
MEMORY_PROVIDER=mem0
MEM0_API_KEY=m0-px1OPjDmgZtUYoMwaNRUeGOL8nnoqT5zv8oUaDdj
# Cloud-managed memory service with reliability guarantees
```

### Quality Requirements for Memory Operations
- ✅ User ID (UUID) as universal identifier across platforms
- ✅ Phone number lookup to find user_id
- ✅ Shared memory across all AI personalities
- ✅ Error handling for memory service failures
- ✅ Performance monitoring for memory operations

## 🚫 Prohibited Patterns (AUTOMATICALLY BLOCKED)

### Quality System Prevents These:
- ❌ **Files exceeding size limits** (automatically blocked)
- ❌ **Code duplication** (pre-commit hooks prevent)
- ❌ **Poor organization** (directory structure validated)
- ❌ **TypeScript errors** (compilation checked)
- ❌ **Deployment without quality checks** (integrated into scripts)

### Legacy Patterns No Longer Possible:
- ❌ Azure Functions deployment commands
- ❌ Giant files (371+ lines like old WhatsApp function)
- ❌ Copy-paste programming between modules
- ❌ Deployment without validation
- ❌ Manual schema management without versioning

### Quality-Enforced Best Practices:
- ✅ Use `supabase functions deploy` for deployment
- ✅ Deploy database schema through migration system
- ✅ Keep all modules under size limits
- ✅ Create shared utilities for common code
- ✅ Pass quality checks before deployment
- ✅ Maintain modular, testable architecture

## 🎯 Quality Assurance Integration

### 🚨 AUTOMATED QUALITY GATES (CANNOT BYPASS):
1. **Pre-Commit Hook**: Quality checks run automatically before every commit
2. **Pre-Deploy Validation**: Quality checks integrated into all deployment scripts
3. **File Size Enforcement**: Oversized files blocked immediately
4. **Duplication Prevention**: Copy-paste code blocked at commit time
5. **TypeScript Validation**: Compilation errors prevent deployment
6. **Organization Checks**: Directory structure validated automatically

### 🚫 AUTOMATIC DEPLOYMENT BLOCKERS:
- ❌ **File size violations** (Edge functions >100 lines, modules >80 lines)
- ❌ **Code duplication detected** (shared modules required)
- ❌ **TypeScript compilation errors** in any function
- ❌ **Improper file organization** (wrong directory structure)
- ❌ **Missing migration versioning** for schema changes

### 📊 Quality Monitoring Dashboard
```bash
# Daily quality score tracking
./scripts/daily-quality-report.sh
# → File size compliance: 95%
# → Code duplication: 0%
# → TypeScript: 100%
# → Organization: 100%
# → Overall Score: 97%
```

## 🔄 Migration Notes (Quality System Added)

### Migrated FROM (Technical Debt):
- ❌ Azure Functions (slow, complex deployment)
- ❌ Giant files (371 lines WhatsApp function)
- ❌ Code duplication (AI logic copied between functions)
- ❌ Manual deployments without validation
- ❌ No quality enforcement

### Migrated TO (Quality-Enforced):
- ✅ Supabase Edge Functions (fast, simple deployment)
- ✅ Modular architecture (all files <100 lines)
- ✅ Shared modules (zero duplication)
- ✅ Automated quality-checked deployments
- ✅ Permanent quality enforcement system

## 📊 Quality-Enhanced Performance Targets

### Deployment Metrics (Quality-Validated)
- **Quality Check**: <10 seconds
- **Function Deployment**: <30 seconds
- **Database Migration**: <10 seconds
- **Cold Start**: <50ms (Supabase Edge Functions)
- **Response Time**: 200-500ms
- **Memory Operations**: <50ms (Mem0 Cloud)

### Quality Metrics (Continuously Monitored)
- **File Size Compliance**: >95%
- **Code Duplication**: 0%
- **Test Coverage**: >80%
- **TypeScript Compilation**: 100%
- **Architecture Adherence**: 100%

### Cost Optimization (Quality-Controlled)
- **Database**: $0-25/month (Supabase Pro plan)
- **Edge Functions**: $0-10/month (pay-per-invocation)
- **Memory Service**: $20-50/month (Mem0 Cloud)
- **AI Inference**: $10-30/month (Groq pay-per-token)
- **Quality System**: $0 (automated scripts)

---
**Purpose**: Quality-enforced deployment system ensuring permanent code excellence
**Scope**: Configuration, quality enforcement, deployment automation, and architecture maintenance
**⚠️ CRITICAL**: Quality checks are MANDATORY and CANNOT be bypassed without explicit override

---
**Purpose**: Single source of truth for all deployment requirements
**Scope**: Configuration, documentation, packaging, and pipeline architecture
**⚠️ CRITICAL**: DEPLOYMENT.md and deployment-config.json MUST stay synchronized at all times
