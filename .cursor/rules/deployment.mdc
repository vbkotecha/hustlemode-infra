---
description: "Azure Functions deployment configuration rules with exact resource names and commands for HustleMode.ai"
globs: "scripts/**/*,deployment-config.json,.github/workflows/**/*,DEPLOYMENT.md"
alwaysApply: false
---

# HustleMode.ai Supabase Deployment Rules

## ⚠️ CRITICAL: Documentation Synchronization

**MANDATORY**: Any changes to deployment configuration MUST update both:
- `README.md` - Complete deployment guide with examples
- `deployment-config.json` - Authoritative configuration values

**These files must ALWAYS stay synchronized** to prevent deployment issues and configuration drift.

## 🎯 Supabase Configuration (Authoritative Values)

### Project Configuration
- **Platform**: `Supabase Edge Functions`
- **Runtime**: `Deno/TypeScript`
- **Project Type**: `Edge Functions + PostgreSQL`
- **Region**: `us-east-1` (default)
- **Database**: `Supabase PostgreSQL with RLS`

### URLs (Production)
- **Base URL**: `https://your-project-ref.supabase.co/functions/v1`
- **Health Check**: `https://your-project-ref.supabase.co/functions/v1/health`
- **Chat API**: `https://your-project-ref.supabase.co/functions/v1/chat`
- **WhatsApp Webhook**: `https://your-project-ref.supabase.co/functions/v1/whatsapp`
- **Dashboard**: `https://supabase.com/dashboard/project/your-project-ref`

### Environment Configuration
- **Memory Provider**: `postgresql` (default) or `mem0`
- **AI Provider**: `Groq (Llama 3.1 70B)`
- **Database**: `Supabase PostgreSQL`
- **Authentication**: `Service Role Key`

## 🚀 Current Deployment Architecture

### Single-Command Deployment
```bash
# Deploy all functions
supabase functions deploy

# Deploy specific function
supabase functions deploy health
supabase functions deploy chat
supabase functions deploy whatsapp
```

### Deployment Requirements
- **Supabase CLI** installed and authenticated
- **Project linked** via `supabase link --project-ref your-project-ref`
- **Database schema** deployed via `supabase db reset --linked`
- **Environment variables** configured in Supabase Dashboard
- **TypeScript compilation** automatic (Deno runtime)

## 🔧 TypeScript/Deno Requirements

### Project Structure Validation
```
supabase-edge-functions/
├── functions/
│   ├── health/index.ts
│   ├── chat/index.ts
│   └── whatsapp/index.ts
├── shared/
│   ├── config.ts
│   ├── database.ts
│   ├── groq.ts
│   ├── memory.ts
│   ├── whatsapp.ts
│   └── utils.ts
├── deno.json
└── import_map.json
```

### Deployment Validation Rules
- ✅ All functions must use TypeScript
- ✅ Import maps defined in `import_map.json`
- ✅ Shared utilities in `shared/` directory
- ✅ Database schema matches PostgreSQL structure
- ❌ Never use Node.js specific imports
- ❌ Never deploy without type checking

## 🚨 MANDATORY Documentation Sync Requirements

### 🔄 Change Propagation Rules (ALWAYS REQUIRED)

#### Any deployment-config.json changes → MUST UPDATE:
- ✅ **README.md**: All URLs, configuration values, and examples
- ✅ **Database schema**: Table structure and functions
- ✅ **Environment variables**: .env template and production config
- ✅ **This cursor rule**: If project configuration changes

#### Any database/supabase-schema.sql changes → MUST UPDATE:
- ✅ **README.md**: Database schema section
- ✅ **deployment-config.json**: Database configuration
- ✅ **Memory service**: PostgreSQL provider implementation

#### Any README.md changes → MUST UPDATE:
- ✅ **Last modified date**: Current date
- ✅ **deployment-config.json**: Verify all values match
- ✅ **Test all URLs**: Ensure curl commands work with current endpoints

### 📋 Documentation Synchronization Checklist

Before committing ANY deployment changes:
- [ ] **README.md** reflects all current configuration values
- [ ] **deployment-config.json** contains authoritative source of truth
- [ ] **All URLs are identical** across all files (no placeholders)
- [ ] **Environment variables are current** in all examples
- [ ] **Dates are updated** to reflect modification time
- [ ] **All curl commands tested** and working
- [ ] **Memory provider configuration** is consistent

### Documentation Standards (STRICT REQUIREMENTS)
- **README.md**: Must reflect current Supabase Edge Functions architecture
- **deployment-config.json**: Must match Supabase Dashboard configuration exactly
- **All URLs**: Must be consistent across all files (zero tolerance for drift)
- **Dates**: Must be current (December 2024)
- **API Keys**: Must be properly templated (no real keys in repo)

## 🔧 Deployment Methods

### Method 1: Supabase CLI (Recommended)
```bash
# Link to project
supabase link --project-ref your-project-ref

# Deploy database schema
supabase db reset --linked

# Deploy all functions
supabase functions deploy

# Deploy with environment file
supabase functions deploy --env-file .env
```

### Method 2: Individual Function Deployment
```bash
# Deploy specific functions
supabase functions deploy health
supabase functions deploy chat
supabase functions deploy whatsapp
```

### Method 3: Automated Script
```bash
./scripts/deploy-supabase.sh
```

## 🗄️ Database Deployment Requirements

### Schema Deployment (MANDATORY)
```bash
# Deploy schema first
supabase db reset --linked

# Verify tables created
supabase db ls
```

### Required Tables
- ✅ `users` - Core user data with phone number lookup
- ✅ `user_preferences` - AI personality and settings
- ✅ `conversation_memory` - Chat context (replaces Mem0)

### Security Requirements
- ✅ Row Level Security (RLS) enabled on all tables
- ✅ Service role key for Edge Functions
- ✅ Proper foreign key constraints
- ✅ Indexes for performance optimization

## 🧠 Memory Service Configuration

### PostgreSQL Provider (Default)
```bash
MEMORY_PROVIDER=postgresql
# Uses native Supabase PostgreSQL with full-text search
```

### Mem0 Provider (Optional)
```bash
MEMORY_PROVIDER=mem0
MEM0_API_KEY=m0-your-api-key
# Requires additional Mem0 Cloud subscription
```

### Switching Providers
- ✅ Change environment variable only
- ✅ No code changes required
- ✅ Automatic detection and routing
- ✅ Graceful fallback on errors

## 🚫 Prohibited Patterns

### Never Do These:
- ❌ Use Azure Functions deployment commands
- ❌ Reference old Azure URLs or configurations
- ❌ Deploy without database schema first
- ❌ Use Node.js imports in Deno functions
- ❌ Store real API keys in version control
- ❌ Deploy without type checking

### Always Do These:
- ✅ Use `supabase functions deploy` for deployment
- ✅ Deploy database schema before functions
- ✅ Use TypeScript throughout codebase
- ✅ Test endpoints after deployment
- ✅ Keep memory provider abstraction
- ✅ Validate environment variables

## 🎯 Quality Assurance

### 🚨 BEFORE ANY DEPLOYMENT CHANGE - MANDATORY CHECKLIST:
1. **Documentation Sync**: Verify README.md and deployment-config.json are consistent
2. **URL Testing**: Test ALL documented URLs and endpoints work
3. **Database Schema**: Ensure database schema is deployed and up-to-date
4. **TypeScript Compilation**: Validate all functions compile without errors
5. **Environment Variables**: Verify all required variables are configured
6. **Memory Provider**: Test memory service functionality
7. **Function Keys**: Ensure service role key is properly configured

### 🚫 DEPLOYMENT BLOCKERS:
- ❌ **Inconsistent URLs** between README.md and deployment-config.json
- ❌ **Missing database schema** deployment
- ❌ **TypeScript compilation errors** in any function
- ❌ **Missing environment variables** required for functionality
- ❌ **Outdated documentation** after configuration changes

## 🔄 Migration Notes

### Migrated FROM Azure:
- ❌ Azure Functions (Python runtime)
- ❌ Azure OpenAI Service
- ❌ Azure PostgreSQL
- ❌ Function key authentication
- ❌ Complex GitHub Actions pipeline

### Migrated TO Supabase:
- ✅ Supabase Edge Functions (Deno/TypeScript)
- ✅ Groq API (Llama 3.1 70B)
- ✅ Supabase PostgreSQL
- ✅ Service role authentication
- ✅ Simple CLI deployment

## 📊 Performance Targets

### Deployment Metrics
- **Function Deployment**: <30 seconds
- **Database Schema**: <10 seconds
- **Cold Start**: <100ms
- **Response Time**: 200-500ms
- **Memory Operations**: <50ms

### Cost Optimization
- **Database**: Included with Supabase plan
- **Edge Functions**: Pay-per-invocation
- **Memory Service**: $0 (PostgreSQL) or $20-50/month (Mem0)
- **AI Inference**: $10-30/month (Groq pay-per-token)

---
**Purpose**: Single source of truth for Supabase deployment requirements
**Scope**: Configuration, documentation, deployment, and memory service architecture
**⚠️ CRITICAL**: README.md and deployment-config.json MUST stay synchronized at all times

---
**Purpose**: Single source of truth for all deployment requirements
**Scope**: Configuration, documentation, packaging, and pipeline architecture
**⚠️ CRITICAL**: DEPLOYMENT.md and deployment-config.json MUST stay synchronized at all times
