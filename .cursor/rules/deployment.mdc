---
description: 
globs: scripts/**/*,deployment-config.json,.github/workflows/**/*
alwaysApply: false
---
---
description: "Azure Functions deployment configuration rules with exact resource names and commands for HustleMode.ai"
globs: "scripts/**/*,deployment-config.json,.github/workflows/**/*"
alwaysApply: false
---

# HustleMode.ai Deployment Rules

## üéØ Azure Configuration (Authoritative Values)

### Resource Configuration
- **Function App Name**: `hustlemode-api`
- **Resource Group**: `hustlemode.ai`
- **Location**: `eastus`
- **Runtime**: `PYTHON:3.11`
- **Hosting Plan**: `Consumption Plan`
- **Service Type**: `Azure Functions v2`

### URLs (Production)
- **Function App**: `https://hustlemode-api.azurewebsites.net/`
- **WhatsApp Webhook**: `https://hustlemode-api.azurewebsites.net/api/messaging/whatsapp`
- **Health Check**: `https://hustlemode-api.azurewebsites.net/api/health`
- **Kudu SCM**: `https://hustlemode-api.scm.azurewebsites.net/`

### GitHub Configuration
- **Repository**: `https://github.com/vbkotecha/hustlemode-infra`
- **Secret**: `AZUREAPPSERVICE_PUBLISHPROFILE_FFEB2282094642A1A8B5E3AFAE67C0DC`

## üöÄ Current Pipeline Architecture

### 2-Stage Deployment Pipeline
1. **Anti-Bloat Check** (runs on all pushes/PRs)
   - Repository hygiene verification
   - Quality gate before deployment

2. **Deploy** (main branch only)
   - Python package installation to `.python_packages/lib/site-packages/`
   - Direct ZIP deployment via Azure API
   - Health and webhook endpoint verification

### Pipeline Requirements
- **NEVER use artifact upload/download** - deploy directly
- **ALWAYS install Python packages** to `.python_packages/lib/site-packages/`
- **ALWAYS verify endpoints** after deployment
- **NEVER use virtual environments** in GitHub Actions

## üêç Python Packaging Requirements

### Mandatory Package Structure
```bash
# Correct installation command
cd azure-functions-deploy
mkdir -p .python_packages/lib/site-packages
pip install -r requirements.txt --target .python_packages/lib/site-packages
```

### Package Validation Rules
- ‚úÖ Deployment ZIP must contain `.python_packages/lib/site-packages/` with all dependencies
- ‚úÖ Use `zip -r deploy.zip .` to include hidden directories
- ‚ùå Never use virtual environments for Azure Functions deployment
- ‚ùå Never use `zip -r deploy.zip ./*` (misses .python_packages)

## üìö Documentation Sync Requirements

### When Files Change, Update These:

#### deployment-config.json ‚Üí Update:
- DEPLOYMENT.md URLs and configuration values
- GitHub workflow app names and endpoints
- This cursor rule if resource names change

#### .github/workflows/azure-functions-deploy.yml ‚Üí Update:
- DEPLOYMENT.md Method 3 section
- deployment-config.json deployment methods
- Pipeline stage descriptions

#### DEPLOYMENT.md ‚Üí Update:
- Last modified date
- Verify consistency with deployment-config.json
- Test all curl commands with current endpoints

### Documentation Standards
- **DEPLOYMENT.md**: Must reflect current 2-stage pipeline architecture
- **deployment-config.json**: Must match Azure Portal configuration
- **All URLs**: Must be consistent across all files
- **Dates**: Must be current (June 9, 2025)

## üîß Deployment Methods

### Method 1: Azure Functions Core Tools (Recommended)
```bash
cd azure-functions-deploy
func azure functionapp publish hustlemode-api --python --build remote
```

### Method 2: GitHub Actions (Automated)
- 2-stage pipeline: Anti-Bloat Check ‚Üí Deploy
- Direct ZIP deployment with endpoint verification
- Runs on push to main branch

### Method 3: Clean Script
```bash
./scripts/deploy-clean.sh --auto
```

## üö´ Prohibited Patterns

### Never Do These:
- ‚ùå Use different app names between files (always `hustlemode-api`)
- ‚ùå Create 3-stage pipelines with artifact upload/download
- ‚ùå Install Python packages to system or virtual environment
- ‚ùå Use placeholder values in documentation
- ‚ùå Deploy without endpoint verification
- ‚ùå Miss .python_packages directory in ZIP

### Always Do These:
- ‚úÖ Use exact resource names across all files
- ‚úÖ Install packages to `.python_packages/lib/site-packages/`
- ‚úÖ Deploy directly without artifact complexity
- ‚úÖ Verify health and webhook endpoints post-deployment
- ‚úÖ Keep documentation synchronized and current

## üéØ Quality Assurance

### Before Any Deployment Change:
1. Verify all three files are consistent
2. Test documented URLs and endpoints
3. Ensure GitHub workflow matches documentation
4. Validate Python packaging follows requirements
5. Update last modified dates

---
**Purpose**: Single source of truth for all deployment requirements
**Scope**: Configuration, documentation, packaging, and pipeline architecture
**Updates**: Must be synchronized with deployment-config.json and DEPLOYMENT.md
