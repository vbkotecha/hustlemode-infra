name: Deploy HustleMode.ai to Azure Functions

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './azure-functions-deploy'
  PYTHON_VERSION: '3.11'

jobs:
  anti-bloat-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4

    - name: 'Run Anti-Bloat Check'
      run: |
        chmod +x scripts/check-bloat.sh
        ./scripts/check-bloat.sh

    - name: 'Report Results'
      if: success()
      run: echo "üéØ Repository is clean and bloat-free! üî•"
      
    - name: 'Report Violations'
      if: failure()
      run: |
        echo "‚ùå Repository bloat detected!"
        echo "Review the violations above and fix them before merging."
        exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: anti-bloat-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4

    - name: 'Setup Python version'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Build Azure Functions Package'
      run: |
        echo "üîß Building Azure Functions deployment package..."
        
        # Clean any existing build artifacts
        rm -rf .build .temp
        
        # Create clean build directory (matches deploy-clean.sh)
        BUILD_DIR=".build/functions-$(date +%s)"
        mkdir -p "$BUILD_DIR"
        
        echo "üì¶ Preparing clean Azure Functions deployment package..."
        
        # Copy ONLY Azure Functions deployment files to clean build directory
        cp -r ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/* "$BUILD_DIR/"
        
        echo "üêç Creating virtual environment and installing packages..."
        
        # Create virtual environment in build directory
        python -m venv "$BUILD_DIR/venv"
        source "$BUILD_DIR/venv/bin/activate"
        
        # Create proper Azure Functions package structure
        mkdir -p "$BUILD_DIR/.python_packages/lib/site-packages"
        
        # Install packages for Linux x86_64 (Azure Functions platform)
        pip install --upgrade pip
        echo "üîß Installing packages for Linux x86_64 platform (Azure Functions)..."
        pip install -r "$BUILD_DIR/requirements.txt" \
          --target "$BUILD_DIR/.python_packages/lib/site-packages" \
          --platform linux_x86_64 \
          --implementation cp \
          --python-version 3.11 \
          --only-binary=:all: \
          --no-compile \
          --no-deps
        
        # Install dependencies with fallback for any missing packages
        echo "üîß Installing dependencies with fallback to universal packages..."
        pip install -r "$BUILD_DIR/requirements.txt" \
          --target "$BUILD_DIR/.python_packages/lib/site-packages" \
          --no-compile \
          --upgrade
        
        # Deactivate virtual environment
        deactivate
        
        # Remove virtual environment directory (not needed in deployment)
        rm -rf "$BUILD_DIR/venv"
        
        echo "‚úÖ Packages installed locally"
        
        # Create deployment zip from clean build directory (matches deploy-clean.sh exactly)
        cd "$BUILD_DIR"
        zip -r "../release.zip" .
        cd - > /dev/null
        
        echo "‚úÖ Clean deployment package created: release.zip"

    - name: 'Deploy via ZIP Deploy to Azure Functions'
      run: |
        echo "üöÄ Starting ZIP Deploy to Azure Functions..."
        
        # Extract publish profile details
        PUBLISH_PROFILE='${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_570EFB7F49FD40F5B139C52B770A5A1C }}'
        
        # Extract username and password from publish profile
        USERNAME=$(echo "$PUBLISH_PROFILE" | grep -o 'userName="[^"]*"' | cut -d'"' -f2)
        PASSWORD=$(echo "$PUBLISH_PROFILE" | grep -o 'userPWD="[^"]*"' | cut -d'"' -f2)
        
        # Deploy via ZIP Deploy API
        curl -X POST \
          -u "$USERNAME:$PASSWORD" \
          -H "Content-Type: application/zip" \
          --data-binary @release.zip \
          "https://hustlemode-api.scm.azurewebsites.net/api/zipdeploy?isAsync=false"
        
        echo "üì¶ ZIP Deploy completed!"

    - name: 'Verify Deployment'
      run: |
        echo "üîç Verifying deployment..."
        sleep 30  # Wait for deployment to settle
        
        # Check if the function app is responding
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://hustlemode-api.azurewebsites.net/")
        
        if [ "$RESPONSE" -eq 200 ] || [ "$RESPONSE" -eq 404 ]; then
          echo "‚úÖ Function app is responding (HTTP $RESPONSE)"
        else
          echo "‚ùå Function app verification failed (HTTP $RESPONSE)"
          exit 1
        fi

    - name: 'Deployment Success'
      run: echo "üî• HustleMode.ai Azure Functions deployed via ZIP Deploy successfully! STAY HARD! üí™"

    - name: 'Cleanup Build Artifacts'
      run: |
        echo "üßπ Cleaning up build artifacts..."
        rm -rf .build .temp release.zip
        echo "‚úÖ Build artifacts cleaned up" 